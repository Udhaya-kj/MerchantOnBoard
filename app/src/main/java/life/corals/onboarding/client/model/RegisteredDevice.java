/*
 * Corals app
 * Corals openAPI file
 *
 * OpenAPI spec version: 0.0.10
 * Contact: gp2wins-corals@yahoo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package life.corals.onboarding.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * RegisteredDevice
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-21T12:54:04.779Z")
public class RegisteredDevice {
  @SerializedName("device_id")
  private String deviceId = null;

  @SerializedName("device_activation_cd")
  private String deviceActivationCd = null;

  @SerializedName("device_holder_name")
  private String deviceHolderName = null;

  @SerializedName("device_role")
  private String deviceRole = null;

  public RegisteredDevice deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

   /**
   * Get deviceId
   * @return deviceId
  **/
@Schema(description = "")
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }

  public RegisteredDevice deviceActivationCd(String deviceActivationCd) {
    this.deviceActivationCd = deviceActivationCd;
    return this;
  }

   /**
   * Get deviceActivationCd
   * @return deviceActivationCd
  **/
@Schema(description = "")
  public String getDeviceActivationCd() {
    return deviceActivationCd;
  }

  public void setDeviceActivationCd(String deviceActivationCd) {
    this.deviceActivationCd = deviceActivationCd;
  }

  public RegisteredDevice deviceHolderName(String deviceHolderName) {
    this.deviceHolderName = deviceHolderName;
    return this;
  }

   /**
   * Get deviceHolderName
   * @return deviceHolderName
  **/
@Schema(description = "")
  public String getDeviceHolderName() {
    return deviceHolderName;
  }

  public void setDeviceHolderName(String deviceHolderName) {
    this.deviceHolderName = deviceHolderName;
  }

  public RegisteredDevice deviceRole(String deviceRole) {
    this.deviceRole = deviceRole;
    return this;
  }

   /**
   * Get deviceRole
   * @return deviceRole
  **/
@Schema(description = "")
  public String getDeviceRole() {
    return deviceRole;
  }

  public void setDeviceRole(String deviceRole) {
    this.deviceRole = deviceRole;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisteredDevice registeredDevice = (RegisteredDevice) o;
    return Objects.equals(this.deviceId, registeredDevice.deviceId) &&
        Objects.equals(this.deviceActivationCd, registeredDevice.deviceActivationCd) &&
        Objects.equals(this.deviceHolderName, registeredDevice.deviceHolderName) &&
        Objects.equals(this.deviceRole, registeredDevice.deviceRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceId, deviceActivationCd, deviceHolderName, deviceRole);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisteredDevice {\n");
    
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceActivationCd: ").append(toIndentedString(deviceActivationCd)).append("\n");
    sb.append("    deviceHolderName: ").append(toIndentedString(deviceHolderName)).append("\n");
    sb.append("    deviceRole: ").append(toIndentedString(deviceRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

